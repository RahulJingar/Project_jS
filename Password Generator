HTML:-

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Password Generator</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="p-4 bg-gray-100">
  <div class="container max-w-md mx-auto bg-white p-6 rounded-xl shadow-md">
    <h1 class="text-2xl font-bold mb-4 text-center">Password Generator</h1>

    <div class="mb-4 flex items-center gap-2">
      <input
        readonly
        placeholder="Password"
        class="flex-1 p-2 border rounded"
        data-passwordDisplay
      />
      <button data-copy class="p-1">
        <span data-copyMsg class="text-xs text-green-600 mr-1"></span>
        <img
          src="https://static.vecteezy.com/system/resources/previews/000/423/339/large_2x/copy-icon-vector-illustration.jpg"
          class="h-6"
          alt="copy"
        />
      </button>
    </div>

    <div class="mb-4">
      <div class="flex justify-between mb-1">
        <label>Password Length</label>
        <span data-lengthNumber>10</span>
      </div>
      <input
        type="range"
        min="1"
        max="20"
        value="10"
        class="w-full"
        step="1"
        data-lengthSlider
      />
    </div>

    <div class="space-y-2 mb-4">
      <div>
        <input type="checkbox" id="uppercase" />
        <label for="uppercase">Include Uppercase Letters</label>
      </div>
      <div>
        <input type="checkbox" id="lowercase" />
        <label for="lowercase">Include Lowercase Letters</label>
      </div>
      <div>
        <input type="checkbox" id="numbers" />
        <label for="numbers">Include Numbers</label>
      </div>
      <div>
        <input type="checkbox" id="symbols" />
        <label for="symbols">Include Symbols</label>
      </div>
    </div>

    <div class="mb-4 flex items-center gap-2">
      <p>Strength:</p>
      <div data-indicater class="w-4 h-4 rounded-full bg-gray-300"></div>
    </div>

    <button
      class="generateBtn w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition"
    >
      Generate Password
    </button>
  </div>

  <script src="passwordGenerater.js"></script>
</body>

</html>



jS:-

const inputSlider = document.querySelector("[data-lengthSlider]");
const lengthDisplay = document.querySelector("[data-lengthNumber]");
const passwordDisplay = document.querySelector("[data-passwordDisplay]");
const copyBtn = document.querySelector("[data-copy]");
const copyMsg = document.querySelector("[data-copyMsg]");
const uppercaseCheck = document.querySelector("#uppercase");
const lowercaseCheck = document.querySelector("#lowercase");
const numbersCheck = document.querySelector("#numbers");
const symbolsCheck = document.querySelector("#symbols");
const generateBtn = document.querySelector(".generateBtn");
const indicater = document.querySelector("[data-indicater]");
const allCheckBox = document.querySelectorAll("input[type=checkbox]");
const symbols = "~!@#$%^&*()_+{}[]|:;<>,.?/";

let password = "";
let passwordLength = 10;
let checkCount = 0;

handleSlider();

function handleSlider() {
  inputSlider.value = passwordLength;
  lengthDisplay.innerText = passwordLength;
}

function setIndicater(color) {
  indicater.style.backgroundColor = color;
}

function getRndInteger(min, max) {
  return Math.floor(Math.random() * (max - min)) + min;
}

function generateRandomNumber() {
  return getRndInteger(0, 10);
}

function generateLowerCase() {
  return String.fromCharCode(getRndInteger(97, 123));
}

function generateUpperCase() {
  return String.fromCharCode(getRndInteger(65, 91));
}

function generateSymbol() {
  const randNum = getRndInteger(0, symbols.length);
  return symbols.charAt(randNum);
}

function calcStrength() {
  const hasUpper = uppercaseCheck.checked;
  const hasLower = lowercaseCheck.checked;
  const hasNum = numbersCheck.checked;
  const hasSym = symbolsCheck.checked;

  if (hasUpper && hasLower && (hasNum || hasSym) && passwordLength >= 8) {
    setIndicater("#0f0"); // strong
  } else if (
    (hasLower || hasUpper) &&
    (hasNum || hasSym) &&
    passwordLength >= 6
  ) {
    setIndicater("#ff0"); // medium
  } else {
    setIndicater("#f00"); // weak
  }
}

async function copyContent() {
  try {
    await navigator.clipboard.writeText(passwordDisplay.value);
    copyMsg.innerText = "Copied";
  } catch (e) {
    copyMsg.innerText = "Failed";
  }

  copyMsg.classList.add("active");
  setTimeout(() => {
    copyMsg.classList.remove("active");
    copyMsg.innerText = "";
  }, 2000);
}

function handleCheckBoxChange() {
  checkCount = 0;
  allCheckBox.forEach((checkbox) => {
    if (checkbox.checked) checkCount++;
  });

  if (passwordLength < checkCount) {
    passwordLength = checkCount;
    handleSlider();
  }
}

function shufflePassword(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array.join("");
}

allCheckBox.forEach((checkbox) =>
  checkbox.addEventListener("change", handleCheckBoxChange)
);

inputSlider.addEventListener("input", (e) => {
  passwordLength = +e.target.value;
  handleSlider();
});

copyBtn.addEventListener("click", () => {
  if (passwordDisplay.value) copyContent();
});

generateBtn.addEventListener("click", () => {
  if (checkCount === 0) return;

  if (passwordLength < checkCount) {
    passwordLength = checkCount;
    handleSlider();
  }

  password = "";
  let funArr = [];

  if (uppercaseCheck.checked) funArr.push(generateUpperCase);
  if (lowercaseCheck.checked) funArr.push(generateLowerCase);
  if (numbersCheck.checked) funArr.push(generateRandomNumber);
  if (symbolsCheck.checked) funArr.push(generateSymbol);

  for (let i = 0; i < funArr.length; i++) {
    password += funArr[i]();
  }

  for (let i = 0; i < passwordLength - funArr.length; i++) {
    let randIndex = getRndInteger(0, funArr.length);
    password += funArr[randIndex]();
  }

  password = shufflePassword(Array.from(password));
  passwordDisplay.value = password;
  calcStrength();
});
